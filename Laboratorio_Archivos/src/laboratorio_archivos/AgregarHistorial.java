/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laboratorio_archivos;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeffrey Felix
 */
public class AgregarHistorial extends javax.swing.JFrame {

    String f, h;

    public AgregarHistorial() {
        initComponents();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        TablaAgendaV = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDiagnostico = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPrescripcion = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombreP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCedulaD = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        txtFechaCita = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtServicio = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaAgendaV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaAgendaV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaAgendaVMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TablaAgendaV);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 143, 789, 223));

        txtDiagnostico.setColumns(20);
        txtDiagnostico.setRows(5);
        jScrollPane1.setViewportView(txtDiagnostico);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 520, 328, 131));

        txtPrescripcion.setColumns(20);
        txtPrescripcion.setRows(5);
        jScrollPane2.setViewportView(txtPrescripcion);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 520, 328, 130));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Prescripción");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 490, 206, 37));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Diagnostico");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 490, 206, 37));

        txtNombreP.setEditable(false);
        getContentPane().add(txtNombreP, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 400, 204, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Nombre del perro:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 400, -1, -1));

        txtCedulaD.setEditable(false);
        getContentPane().add(txtCedulaD, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, 190, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Cedula del dueño:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, -1, -1));

        jButton1.setText("Crear historial");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 670, 275, 56));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Crear historial clinico ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 23, 408, 51));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Seleccione una cita:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 87, 373, 49));

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jButton8.setText("←");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 20, 135, 46));

        txtFechaCita.setEditable(false);
        getContentPane().add(txtFechaCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 450, 204, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Fecha de la Cita:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, -1, -1));

        txtServicio.setEditable(false);
        getContentPane().add(txtServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 450, 205, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Tipo de servicio: ");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Icono Registro.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, 110, 110));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoBlanco.jpg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 1020, 740));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Interface_Veterinario pantalla_interface = new Interface_Veterinario();
        pantalla_interface.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void TablaAgendaVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaAgendaVMouseClicked
        int fila = TablaAgendaV.getSelectedRow();
        if (fila == -.1) {

        } else {
            int idDueño = Integer.parseInt((String) TablaAgendaV.getValueAt(fila, 0).toString());
            String nombreD = (String) TablaAgendaV.getValueAt(fila, 1);
            String nombrePerro = (String) TablaAgendaV.getValueAt(fila, 2);
            String servicio = (String) TablaAgendaV.getValueAt(fila, 3);
            String fechaC = (String) TablaAgendaV.getValueAt(fila, 4);
            String horaC = (String) TablaAgendaV.getValueAt(fila, 5);
            f = (String) TablaAgendaV.getValueAt(fila, 4);
            h = (String) TablaAgendaV.getValueAt(fila, 5);
            String estado = (String) TablaAgendaV.getValueAt(fila, 6);
            double valor = Double.parseDouble((String) TablaAgendaV.getValueAt(fila, 7).toString());
            txtCedulaD.setText("" + idDueño);
            txtNombreP.setText(nombrePerro);
            txtFechaCita.setText(fechaC);
            txtServicio.setText(servicio);
        }
    }//GEN-LAST:event_TablaAgendaVMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        crearHistorial();
        cruceAgenda(f, h);
        actualizarTabla();
    }//GEN-LAST:event_jButton1ActionPerformed

    void crearHistorial() {
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File historial = new File(Dir, "Historiales.txt");
        FileWriter fw = null;
        if (!historial.exists()) { //No existe el archivo
            x.mkdir();
            try {
                historial.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }
        try {
            fw = new FileWriter(historial, true);
            PrintWriter pw = new PrintWriter(fw);
            int cedula = 0;
            try {
                cedula = Integer.parseInt(txtCedulaD.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Debe rellenar la cedula solo con numeros");
            }
            String nombre = txtNombreP.getText();
            String fecha = txtFechaCita.getText();
            String servicio = txtServicio.getText();
            String diagnostico = txtDiagnostico.getText();
            String prescripcion = txtPrescripcion.getText();
            if (cedula != 0) {
                pw.print(cedula + ";" + nombre + ";" + fecha + ";" + servicio + ";" + diagnostico + ";" + prescripcion + ";");
                pw.println();
                JOptionPane.showMessageDialog(rootPane, "El archivo se guardo");
                txtCedulaD.setText("");
                txtNombreP.setText("");
                txtFechaCita.setText("");
                txtServicio.setText("");
                txtDiagnostico.setText("");
                txtPrescripcion.setText("");
            } else {
                JOptionPane.showMessageDialog(rootPane, "No se pudo guardar el archivo");
            }
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (fw != null) {
                    fw.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

        }
    }

    void cruceAgenda(String fechaC, String horaC) {
        pasarDatosAgendaACambios(fechaC, horaC);
        try {
            limpiarAgenda();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Modificar_Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        pasarDatosCambiosAAgenda();
        try {
            limpiarCambios();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Modificar_Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void limpiarAgenda() throws FileNotFoundException {
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File agenda = new File(Dir, "Agenda.txt");
        if (!agenda.exists()) { //No existe el archivo
            x.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }

        try {
            FileWriter fw = new FileWriter(agenda);
            if (fw != null) {
                fw.close();
            }
            if (agenda.delete()) {
                System.out.println("El archivo fue eliminado");
                agenda.createNewFile();
            } else {
                System.out.println("El archivo agenda no se puede borrar");
            }

        } catch (IOException ex) {
            Logger.getLogger(AgregarHistorial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void limpiarCambios() throws FileNotFoundException {
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File cambios = new File(Dir, "Cambios.txt");
        if (!cambios.exists()) { //No existe el archivo
            x.mkdir();
            try {
                cambios.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }

        try {
            FileWriter fw = new FileWriter(cambios);
            if (fw != null) {
                fw.close();
            }
            if (cambios.delete()) {
                System.out.println("El archivo fue eliminado");
                cambios.createNewFile();
            } else {
                System.out.println("El archivo cambios no se puede borrar");
            }

        } catch (IOException ex) {
            Logger.getLogger(AgregarHistorial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void pasarDatosAgendaACambios(String fechaC, String horaC) {
        String ruta = "C:\\Veterinaria_PerrosPET"; // ruta para el archivo
        String fileName = "Agenda.txt"; // nombre
        File archivo = new File(ruta, fileName); // instancia el archivo
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File cambio = new File(Dir, "Cambios.txt");
        FileWriter fw = null;
        if (!cambio.exists()) { //No existe el archivo
            x.mkdir();
            try {
                cambio.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }

        try (Scanner sc = new Scanner(archivo)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(";");
                int idPersona = Integer.parseInt(data[0]);
                String nombre = data[1];
                String nombrePerro = data[2];
                String servicio = data[3];
                String fecha = data[4];
                String hora = data[5];
                String estado;
                if (fechaC.equals(fecha) && horaC.equals(hora)) {
                    estado = "Atendida";
                } else {
                    estado = data[6];
                }
                double valor = Double.parseDouble(data[7]);
                // comparar idBuscar con idPersona
                /*comprar y retornar
		return data[2]*/

                try {
                    fw = new FileWriter(cambio, true);
                    PrintWriter pw = new PrintWriter(fw);
                    pw.print(idPersona + ";" + nombre + ";" + nombrePerro + ";" + servicio + ";" + fecha + ";" + hora + ";" + estado + ";" + valor + ";");
                    pw.println();

                } catch (IOException e) {
                    System.out.println(e);
                } finally {
                    try {
                        if (fw != null) {
                            fw.close();
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }

                }
            }//fin while
            JOptionPane.showMessageDialog(rootPane, "El archivo se doblado");
        } catch (IOException e) {
            System.out.println("Error");
        }
    }

    void pasarDatosCambiosAAgenda() {
        String ruta = "C:\\Veterinaria_PerrosPET"; // ruta para el archivo
        String fileName = "Cambios.txt"; // nombre
        File archivo = new File(ruta, fileName); // instancia el archivo
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File agenda = new File(Dir, "Agenda.txt");
        FileWriter fw = null;
        if (!agenda.exists()) { //No existe el archivo
            x.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }

        try (Scanner sc = new Scanner(archivo)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(";");
                int idPersona = Integer.parseInt(data[0]);
                String nombre = data[1];
                String nombrePerro = data[2];
                String servicio = data[3];
                String fecha = data[4];
                String hora = data[5];
                String estado = data[6];
                double valor = Double.parseDouble(data[7]);
                // comparar idBuscar con idPersona
                /*comprar y retornar
		return data[2]*/

                try {
                    fw = new FileWriter(agenda, true);
                    PrintWriter pw = new PrintWriter(fw);
                    pw.print(idPersona + ";" + nombre + ";" + nombrePerro + ";" + servicio + ";" + fecha + ";" + hora + ";" + estado + ";" + valor + ";");
                    pw.println();
                } catch (IOException e) {
                    System.out.println(e);
                } finally {
                    try {
                        if (fw != null) {
                            fw.close();

                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }

                }

            }//fin while
            JOptionPane.showMessageDialog(rootPane, "El archivo se Cruzo corectamente");
        } catch (IOException e) {
            System.out.println("Error");
        }
    }

    void actualizarTabla() {
        String[] columnas = {"Cedula del dueño", "Nombre del dueño", "Nombre del perro", "Servicio", "Fecha de la cita", "Hora", "Estado", "Valor de se   rvicio"};
        DefaultTableModel model2 = new DefaultTableModel(columnas, 0);
        TablaAgendaV.setModel(model2);
        MostrarCitas();
    }

    void MostrarCitas() {
        DefaultTableModel model = (DefaultTableModel) TablaAgendaV.getModel();
        File x = new File("C:\\Veterinaria_PerrosPET");
        String Dir = "C:\\Veterinaria_PerrosPET";
        File agenda = new File(Dir, "Agenda.txt");
        if (!agenda.exists()) { //No existe el archivo
            x.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                System.out.println("Error");
            }
        }
        FileReader fw;
        try {
            fw = new FileReader(agenda);
            BufferedReader br = new BufferedReader(fw);
            String lector;
            while ((lector = br.readLine()) != null) {
                System.out.println(lector);
                String dato = "";
                int cedulaDueño = 0;
                String nombreDueño = "";
                String nombrePerro = "";
                String servicio = "";
                String fechaCita = "";
                String hora = "";
                String estado = "";
                double valor = 0;

                int cont = 0;
                for (int i = 0; i < lector.length(); i++) {
                    if (lector.substring(i, i + 1).compareTo(";") != 0) {
                        dato = dato.concat(lector.substring(i, i + 1));
                    } else {
                        switch (cont) {
                            case 0:
                                cedulaDueño = Integer.valueOf(dato);
                                break;
                            case 1:
                                nombreDueño = dato;
                                break;
                            case 2:
                                nombrePerro = dato;
                                break;
                            case 3:
                                servicio = dato;
                                break;
                            case 4:
                                fechaCita = dato;
                                break;
                            case 5:
                                hora = dato;
                                break;
                            case 6:
                                estado = dato;
                                break;
                            case 7:
                                valor = Double.parseDouble(dato);
                                break;
                        }
                        cont++;
                        dato = "";
                    }
                }
                if (estado.equals("Confirmada") && (!servicio.equals("Baño") && !servicio.equals("Guardería"))) {
                    String Datos[] = {String.valueOf(cedulaDueño), nombreDueño, nombrePerro, servicio, fechaCita, hora, estado, String.valueOf(valor)};
                    model.addRow(Datos);
                    TablaAgendaV.setModel(model);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz_Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz_Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarHistorial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaAgendaV;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtCedulaD;
    private javax.swing.JTextArea txtDiagnostico;
    private javax.swing.JTextField txtFechaCita;
    private javax.swing.JTextField txtNombreP;
    private javax.swing.JTextArea txtPrescripcion;
    private javax.swing.JTextField txtServicio;
    // End of variables declaration//GEN-END:variables
}
